import numpy as np


class PurgeEmbargoTimeSeriesSplit:
    """
    :param n_split: number of splits for dataframe
    :param training_size_pct: x% Percentage of training size for each split, test size is 1-x%
    :param purge_margin: Number of observations to purge between splits
    :param embargo_margin: Number of observations to embargo between splits
    """

    def __init__(self, n_splits, training_size_pct=.8, purge_margin=None, embargo_margin=None):
        self.n_splits = n_splits
        self.training_size_pct = training_size_pct

        if purge_margin: self.purge_margin = purge_margin
        else: self.purge_margin = 0

        if embargo_margin: self.embargo_margin = embargo_margin
        else: self.embargo_margin = 0

    def get_n_splits(self, X, y, groups):
        return self.n_splits

    def split(self, X, y=None, groups=None):
        n_samples = len(X)
        k_fold_size = n_samples // self.n_splits
        indices = np.arange(n_samples)

        for i in range(self.n_splits):
            # To make sure we don't embargo the first training set size
            if i == 0:
                start = i * k_fold_size
                stop = start + k_fold_size
                mid = int(self.training_size_pct * (stop - start)) + start
                yield indices[start: mid], indices[mid + self.purge_margin: stop]
            else:
                start = i * k_fold_size
                stop = start + k_fold_size
                mid = int(self.training_size_pct * (stop - start)) + start
                yield indices[start + self.embargo_margin: mid], indices[mid + self.purge_margin: stop]

if __name__ == '__main__':
    # petss = PurgeEmbargoTimeSeriesSplit(n_splits=5, training_size_pct=0.8)
    petss = PurgeEmbargoTimeSeriesSplit(n_splits=5, training_size_pct=0.8, purge_margin=10, embargo_margin=10)