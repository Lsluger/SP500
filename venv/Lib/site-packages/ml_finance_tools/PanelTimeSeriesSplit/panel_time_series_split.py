# import numpy as np
import os
import pandas as pd
from collections import OrderedDict


class PanelTimeSeriesSplit:

    def __init__(self, dataset, train_len, test_len, date_col,
                 purge_margin=None):
        self.dataset = dataset
        self.train_len = train_len
        self.test_len = test_len
        self.date_col = date_col

        if purge_margin: self.purge_margin = purge_margin
        else: self.purge_margin = 0

        # DF that is returned after split method
        self.df = None

    @staticmethod
    def get_moving_windows(dataset, train_len, test_len, date_col, purge_margin):
        # Calculate windows for the training and testing data based on the train_len and test_len arguments
        unique_dates = dataset[date_col].unique()
        # print(unique_dates)
        unique_dates.sort()
        num_dates = len(unique_dates)
        num_windows = (num_dates - train_len) // test_len
        print("Number of Training Windows: ", num_windows)

        windows = []
        for i in range(num_windows):
            train_start_date = unique_dates[i]
            train_end_date = unique_dates[(i + train_len - 1)]
            try:
                test_start_date = unique_dates[(i + train_len + purge_margin)]
            except Exception as e:
                print(e)
                print("If you specified a Purge Margin, it likely will go beyond"
                      " the length of your dates for the final train/test splits,"
                      " thus the last date will be substituted as it cannot be purged any further.")
                test_start_date = unique_dates[-1]
            try:
                test_end_date = unique_dates[(i + train_len + test_len + purge_margin - 1)]
            except:
                test_end_date = unique_dates[-1]

            window = {'train_start_date': train_start_date,
                      'train_end_date': train_end_date,
                      'test_start_date': test_start_date,
                      'test_end_date': test_end_date}
            windows.append(window)

        return windows

    def split(self, save_to_csv=False, path=None):
        self.split_df = pd.DataFrame([OrderedDict(x) for x in self.get_moving_windows(dataset=self.dataset, train_len=self.train_len,
                                                                          test_len=self.test_len,
                                                                          date_col=self.date_col,
                                                                          purge_margin=self.purge_margin)])
        if save_to_csv:
            try:
                for index, row in self.split_df.iterrows():
                    df_train = self.dataset[(self.dataset[self.date_col] >= row['train_start_date']) &
                                            (self.dataset[self.date_col] <= row['train_end_date'])]
                    df_test = self.dataset[(self.dataset[self.date_col] >= row['test_start_date']) &
                                           (self.dataset[self.date_col] <= row['test_end_date'])]

                    df_train.to_csv(os.path.join(path, str(index) + "_train.csv"))
                    df_test.to_csv(os.path.join(path, str(index) + "_test.csv"))
                print("Save Complete")
            except ValueError as e:
                print("Need to specify Path if save_to_csv is True")

        return self.split_df

if __name__ == "__main__":
    from ml_finance_tools import CreateQuarterPanelData
    df = CreateQuarterPanelData(start_date='2017-12-31', end_date='2019-12-31', n_obs_each_quarter=10).df

    ptss = PanelTimeSeriesSplit(dataset=df, train_len=3, test_len=1, date_col='date', purge_margin=0)
    df = ptss.split()
    # df = ptss.split(save_to_csv=True, path=r'C:/Users/Kkurek/OneDrive - Franklin Templeton/Equities/Multi_Asset_Analysts/Analyst_Recommendations/Data/train_test_splits')
    print(df)




